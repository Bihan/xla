https://github.com/pytorch/xla/issues/4084
diff --git a/third_party/tsl/tsl/platform/random.cc b/third_party/tsl/tsl/platform/random.cc
index d7b05ab1e..dd7491970 100644
--- a/third_party/tsl/tsl/platform/random.cc
+++ b/third_party/tsl/tsl/platform/random.cc
@@ -15,7 +15,6 @@ limitations under the License.
 
 #include "tsl/platform/random.h"
 
-#include <memory>
 #include <random>
 
 #include "tsl/platform/mutex.h"
@@ -40,12 +39,6 @@ uint64 New64() {
   return (*rng)();
 }
 
-uint64 ThreadLocalNew64() {
-  static thread_local std::unique_ptr<std::mt19937_64> rng =
-      std::unique_ptr<std::mt19937_64>(InitRngWithRandomSeed());
-  return (*rng)();
-}
-
 uint64 New64DefaultSeed() {
   static std::mt19937_64 rng = InitRngWithDefaultSeed();
   static mutex mu(LINKER_INITIALIZED);
diff --git a/third_party/tsl/tsl/platform/random.h b/third_party/tsl/tsl/platform/random.h
index 7e385387c..21eacd34e 100644
--- a/third_party/tsl/tsl/platform/random.h
+++ b/third_party/tsl/tsl/platform/random.h
@@ -25,9 +25,6 @@ namespace random {
 // in different processes.
 uint64 New64();
 
-// Same as previous method, but uses a different RNG for each thread.
-uint64 ThreadLocalNew64();
-
 // Return a 64-bit random value. Uses
 // std::mersenne_twister_engine::default_seed as seed value.
 uint64 New64DefaultSeed();